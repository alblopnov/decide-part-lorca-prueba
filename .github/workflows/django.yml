name: Decide-Lorca application

on:
  pull_request:
    types:
      - labeled
    branches:
      - develop
      - main
    paths-ignore:
      - 'doc/**'
  workflow_call:
    secrets:
      CODACY_PROJECT_TOKEN:
        required: true


jobs:
  build:
    if: ${{ github.event.label.name == 'ready' }}
    strategy:
      matrix:
        pyversion: ['3.10']

    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14.9
        env:
          POSTGRES_USER: decide
          POSTGRES_PASSWORD: decide
          POSTGRES_DB: decide
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{matrix.pyversion}}
      uses: actions/setup-python@v4
      with:
        python-version: ${{matrix.pyversion}}
    - name: psycopg2 prerequisites
      run: sudo apt-get install libpq-dev
    - name: Install dependencies and config
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install codacy-coverage
        cp decide/local_settings.gactions.py decide/local_settings.py
    - name: Run all tests
      if: ${{ github.base_ref == 'main' }}
      run: |
        cd decide
        coverage run --branch --source=. ./manage.py test  --keepdb 
        coverage xml 
    - name: Run tests
      if: ${{ github.base_ref == 'develop' }}
      run: |
        cd decide
        coverage run --branch --source=. ./manage.py test --exclude-tag=slow  --keepdb 
        coverage xml 
    - name: Codacy Coverage Reporter
      uses: codacy/codacy-coverage-reporter-action@v1
      with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          coverage-reports: decide/coverage.xml

  deploy:
    if: ${{ github.base_ref == 'main' && github.event.label.name == 'ready' }}
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Deploy
      env:
        deploy_url: ${{secrets.RENDER_DEPLOY_HOOK_URL}}
      run: |
        curl "$deploy_url" 
